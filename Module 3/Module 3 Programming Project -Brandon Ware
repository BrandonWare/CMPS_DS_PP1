<!doctype html>
<html>
<head>
<meta charset="utf-8">
<title>CMPS 260: Module 3 Programming Project</title>
<style>* { font-family: monospace; }</style>
<script>

// NOTE: You must implement the data structures using the prototype approach.
//       This is not what the book uses, so you have to convert it.
//       See also: https://it.pointpark.edu/tutorials/no-prototype-vs-prototype/

// NOTE: Please review the following links regularly:
//       https://it.pointpark.edu/tutorials/arrays-vs-objects/
//       https://it.pointpark.edu/tutorials/no-prototype-vs-prototype/
//       https://it.pointpark.edu/tutorials/implementation-vs-interface/

//---------//
// Project //
//---------//
console.log("Project");

// 1. Implement the linked list data structure using the prototype.

function Node(element) {
  this.element = element;
  this.next = null;
}

function LinkedList() {
  this.length = 0;
  this.head = null;
}

LinkedList.prototype.append = function(element) {
  var node = new Node(element);
  var current;
  if (this.head === null) {
    this.head = node;
  } else {
    current = this.head;
    while (current.next) {
      current = current.next;
    }
    current.next = node;
  }
  this.length++;
};

LinkedList.prototype.insert = function(position, element) {
  if (position >= 0 && position <= this.length) {
    var node = new Node(element),
        current = this.head,
        previous,
        index = 0;

    if (position === 0) {
      node.next = this.head;
      this.head = node;
    } else {
      while (index++ < position) {
        previous = current;
        current = current.next;
      }
      node.next = current;
      previous.next = node;
    }

    this.length++;
    return true;
  } else {
    return false;
  }
};

LinkedList.prototype.removeAt = function(position) {
  if (position > -1 && position < this.length) {
    var current = this.head,
        previous,
        index = 0;

    if (position === 0) {
      this.head = current.next;
    } else {
      while (index++ < position) {
        previous = current;
        current = current.next;
      }
      previous.next = current.next;
    }

    this.length--;
    return current.element;
  } else {
    return null;
  }
};

LinkedList.prototype.remove = function(element) {
  var index = this.indexOf(element);
  return this.removeAt(index);
};

LinkedList.prototype.indexOf = function(element) {
  var current = this.head,
      index = 0;
  while (current) {
    if (current.element === element) {
      return index;
    }
    index++;
    current = current.next;
  }
  return -1;
};

LinkedList.prototype.isEmpty = function() {
  return this.length === 0;
};

LinkedList.prototype.size = function() {
  return this.length;
};

LinkedList.prototype.getHead = function() {
  return this.head;
};

LinkedList.prototype.toString = function() {
  var current = this.head;
  var string = "List: ";
  while (current) {
    string += current.element + (current.next ? " -> " : "");
    current = current.next;
  }
  return string;
};

LinkedList.prototype.print = function() {
  console.log(this.toString());
};

// 2. Write a simple test program that shows your implementation works.

var landmarks = new LinkedList();

landmarks.append("A1");
landmarks.append("B");
landmarks.append("C");
landmarks.append("D");
landmarks.append("E");
landmarks.print();

landmarks.insert(1, "A2");
landmarks.print();

landmarks.remove("C");
landmarks.print();

console.log("Index of D:", landmarks.indexOf("D"));
console.log("Size:", landmarks.size());
console.log("Is Empty:", landmarks.isEmpty());

</script>
</head>
<body>
  See console!
</body>
</html>
